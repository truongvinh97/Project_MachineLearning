#include <stdio.h>
#include <wiringPi.h>
#include <pthread.h>
#include <unistd.h>

// Pin numbers for button and PIR sensor
#define BUTTON_PIN 4
#define SENSOR_PIN 2

// Pin numbers for LEDs
#define GREEN_LED  3
#define RED_LED 5

// Pin numbers for door control
#define DOOR_OPEN_PIN 6
//#define DOOR_CLOSE_PIN 24

// Time intervals
#define DOOR_OPEN_TIME 10000 // 10 seconds in milliseconds

// Thread priorities
#define BUTTON_THREAD_PRIORITY 99
#define SENSOR_THREAD_PRIORITY 80
#define DOOR_THREAD_PRIORITY 70
#define LED_THREAD_PRIORITY 60

// Global variables
pthread_mutex_t lock;
int door_status = 0; // 0: closed, 1: opening, 2: opened, 3: closing

// Thread functions
void* button_thread(void* arg);
void* sensor_thread(void* arg);
void* led_thread(void* arg);
void* door_thread(void* arg);

// Main function
int main(int argc, char* argv[])
{
    // Initialize wiringPi library and pins
    if (wiringPiSetupGpio() == -1)
    {
        printf("wiringPiSetupGpio() failed\n");
        return 1;
    }

    pinMode(BUTTON_PIN, INPUT);
    pinMode(SENSOR_PIN, INPUT);
    pinMode(GREEN_LED, OUTPUT);
    pinMode(RED_LED, OUTPUT);
    pinMode(DOOR_OPEN_PIN, OUTPUT);

    pullUpDnControl(BUTTON_PIN, PUD_UP);

    digitalWrite(GREEN_LED, LOW);
    digitalWrite(RED_LED, LOW);

    digitalWrite(DOOR_OPEN_PIN, LOW);
    //pinMode(DOOR_CLOSE_PIN, OUTPUT);
    //digitalWrite(DOOR_CLOSE_PIN, LOW);

    // Initialize mutex
    pthread_mutex_init(&lock, NULL);

    // Create threads
    pthread_t button_thread_id, sensor_thread_id, led_thread_id, door_thread_id;
    pthread_create(&button_thread_id, NULL, button_thread, NULL);
    pthread_create(&sensor_thread_id, NULL, sensor_thread, NULL);
    pthread_create(&led_thread_id, NULL, led_thread, NULL);
    pthread_create(&door_thread_id, NULL, door_thread, NULL);

    // Set thread priorities
    struct sched_param params;
    params.sched_priority = BUTTON_THREAD_PRIORITY;
    pthread_setschedparam(button_thread_id, SCHED_FIFO, &params);

    params.sched_priority = SENSOR_THREAD_PRIORITY;
    pthread_setschedparam(sensor_thread_id, SCHED_FIFO, &params);

    params.sched_priority = LED_THREAD_PRIORITY;
    pthread_setschedparam(led_thread_id, SCHED_FIFO, &params);

    params.sched_priority = DOOR_THREAD_PRIORITY;
    pthread_setschedparam(door_thread_id, SCHED_FIFO, &params);

    // Join threads
    pthread_join(button_thread_id, NULL);
    pthread_join(sensor_thread_id, NULL);
    pthread_join(led_thread_id, NULL);
    pthread_join(door_thread_id, NULL);

    // Cleanup
    pthread_mutex_destroy(&lock);
    return 0;
}

// Button thread function
void* button_thread(void* arg)
{
    while (1)
    {
        if (digitalRead(BUTTON_PIN) == LOW)
        {
           	pthread_mutex_lock(&lock);
		door_status = 1; // set door status to opening
		digitalWrite(DOOR_OPEN_PIN, HIGH);
		digitalWrite(GREEN_LED, HIGH);
		pthread_mutex_unlock(&lock);
	  }
	  usleep(10000); // 10ms delay
    }
}

     // Sensor thread function
void* sensor_thread(void* arg)
{
     while (1)
     {
	  	if (digitalRead(SENSOR_PIN) == HIGH)
     		{
			pthread_mutex_lock(&lock);
			digitalWrite(GREEN_LED, LOW);
			digitalWrite(RED_LED, HIGH);
			pthread_mutex_unlock(&lock);
		}
		usleep(10000); // 10ms delay
	}
}

// LED thread function
void* led_thread(void* arg)
{
	while (1)
	{
		pthread_mutex_lock(&lock);
		if (door_status == 0 || door_status == 3) // door closed or closing
	{
		digitalWrite(GREEN_LED, LOW);
		digitalWrite(RED_LED, LOW);
	}
		pthread_mutex_unlock(&lock);
		usleep(10000); // 10ms delay
	}
}

// Door thread function
void* door_thread(void* arg)
{
	while (1)
	{
		pthread_mutex_lock(&lock);
		if (door_status == 1) // opening
		{
			usleep(DOOR_OPEN_TIME); // wait for door to fully open
			door_status = 2; // set door status to opened
		}
		else if (door_status == 3) // closing
		{
			usleep(DOOR_OPEN_TIME); // wait for door to fully close
			door_status = 0; // set door status to closed
			digitalWrite(DOOR_OPEN_PIN, LOW);
			//digitalWrite(DOOR_CLOSE_PIN, LOW);
		}
		if (door_status == 2) // opened
		{
			digitalWrite(DOOR_OPEN_PIN, HIGH);
			door_status = 3; // set door status to closing
		}
		pthread_mutex_unlock(&lock);
		usleep(10000); // 10ms delay
	}
}